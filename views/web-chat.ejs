<!doctype html>
<html>
<head>
<link rel="stylesheet" href="styles.css">
<script src="/socket.io/socket.io.js"></script>

</head>
<body>
<h1>
    Web Chat
</h1>
    <br>
    <br>
    <video  id="myVideoTag"></video>
    <video id="theirVideoTag"></video>

    <div>
        <label>Your Name</label><input type="text" id="myName"/>
        <label>Message</label><input type="text" id="myMessage"/>
        <input id="sendMessage" type="submit">
        <div id="chatArea">Message Output: </br></div>
        <div id="signalingArea">Signaling Messages: </br></div>
    </div>



    <script type="text/javascript">
   //chat stuff
   var myName = document.querySelector('#myName'); 
   var myMessage = document.querySelector('#myMessage'); 
   var sendMessage = document.querySelector('#sendMessage'); 
   var chatArea = document.querySelector('#chatArea');
   var signalingArea = document.querySelector('#signalingArea');  
   var ROOM = 'chat'; 
   var SIGNAL_ROOM = 'signal_room'; 
   var configuration = {
        iceServers : [{
            urls : "stun:stun.l.google.com:19302"
        }]
   }; 

   var rtcPeerConn; 


   //video stuff
    var myVideoTag = document.querySelector('#myVideoTag');
    var theirVideoTag = document.querySelector('#theirVideoTag'); 
    var width = 240; 
    var height = 0; 
    var streaming = false; 


    // startStream(); 

    io = io.connect(); 
    io.emit('ready', {"chat_room": ROOM, "signal_room": SIGNAL_ROOM}); 

    io.emit('signal', {"type": "user_here", "message": "Are you ready for a call?", "room": SIGNAL_ROOM})

    io.on('announce', function(data){
        displayMessage(data.message); 
    })

    io.on('message', function(data){
        displayMessage(data.author + ":" + data.message); 
    })

    io.on('signaling_message', function(data){
        displaySignalMessage("Signal received: " + data.type); 
        
        if (!rtcPeerConn){
            startSignaling(); 
        }

        if (data.type != "user_here"){
            console.log('some other type of message sent'); 
            var message = JSON.parse(data.message); 
            if (message.sdp){
                rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp) ).then( function(){
                    if(rtcPeerConn.remoteDescription.type == 'offer'){
                        rtcPeerConn.createAnswer(sendLocalDesc, logError); 
                    }
                }).catch(logError); 
            } else {
                rtcPeerConn.addIceCandidate( new RTCIceCandidate(message.candidate)); 
            }
        }
    })

    function startSignaling(){
        displaySignalMessage("starting signaling..."); 
        rtcPeerConn = new RTCPeerConnection(configuration); 

        console.log(rtcPeerConn); 

                //send ice candidate to other peers 
        rtcPeerConn.onicecandidate = function(event){
            console.log('ice candidate'); 
            if (event.candidate){
                io.emit('signal', {"type": "ice_candidate", "message": JSON.stringify({'candidate': event.candidate}), "room": SIGNAL_ROOM }); 
            }
            displaySignalMessage("completed the ice candidate"); 
        }

        rtcPeerConn.onnegotiationneeded = function(){
            console.log('negotiation'); 
            displaySignalMessage("on negotiation called"); 
            rtcPeerConn.createOffer().then(sendLocalDesc).catch(logError); 
        }

        rtcPeerConn.ontrack = function(event){
            console.log('stream'); 
            displaySignalMessage("going to add their stream..."); 
            theirVideoTag.src = URL.createObjectURL(event.streams[0]); 
        }

        navigator.getUserMedia = navigator.getUserMedia 
        || navigator.webkitGetUserMedia 
        || navigator.mozGetUserMedia; 

        var constraints = {
            audio: true, 
            video: true
            }; 


        navigator.getUserMedia(constraints, onSuccess, onError); 
    
        function onSuccess(stream){
            myVideoTag.src = window.URL.createObjectURL(stream); 
            myVideoTag.play(); 

            stream.getTracks().forEach(track => rtcPeerConn.addTrack(track, stream)); 
        }

        function onError(error){
            console.log("Error with getUserMedia: " + error); 
        }

    }

    function sendLocalDesc(desc){
        rtcPeerConn.setLocalDescription(desc)
        .then(function(){
            displaySignalMessage("sending local description"); 
            io.emit('signal', {
                "type": "SDP", 
                "message": JSON.stringify({'sdp': rtcPeerConn.localDescription}), 
                "room": SIGNAL_ROOM
                }); 
            }).catch(logError); 

    }

    function logError(error){
        displaySignalMessage(error.name + ':' + error.message); 
    }


    function displayMessage(message){
        chatArea.innerHTML = chatArea.innerHTML + "<br/>" + message; 
    }

    function displaySignalMessage(message){
        signalingArea.innerHTML = signalingArea.innerHTML + "<br/>" + message; 
    }

    sendMessage.addEventListener('click', function(event){
        io.emit('send', {"author": myName.value, "message": myMessage.value, "room":ROOM }); 
        event.preventDefault(); 
    }, false)

    // function startStream(){
    //     navigator.getUserMedia = navigator.getUserMedia 
    //     || navigator.webkitGetUserMedia 
    //     || navigator.mozGetUserMedia; 

    //     var constraints = {
    //         audio: false, 
    //         video: true
    //         }; 


    //     navigator.getUserMedia(constraints, onSuccess, onError); 
    
    //     function onSuccess(stream){
    //         videoArea.src = window.URL.createObjectURL(stream); 
    //         videoArea.play(); 
    //     }

    //     function onError(error){
    //         console.log("Error with getUserMedia: " + error); 
    //     }
    // }

    //startStream(); 

    </script>

</body>

</html>